// Code generated by protoc-gen-go.
// source: MobileSuiteProtobufProtocol.proto
// DO NOT EDIT!

/*
Package org_victoriest_test is a generated protocol buffer package.

It is generated from these files:
	MobileSuiteProtobufProtocol.proto

It has these top-level messages:
	MobileSuiteProtobuf
	TestMessage
*/
package protobuf

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type MobileSuiteProtobuf struct {
	Type             *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Arena            *int32 `protobuf:"varint,2,req,name=arena" json:"arena,omitempty"`
	Command          *int32 `protobuf:"varint,3,req,name=command" json:"command,omitempty"`
	Message          []byte `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MobileSuiteProtobuf) Reset()         { *m = MobileSuiteProtobuf{} }
func (m *MobileSuiteProtobuf) String() string { return proto.CompactTextString(m) }
func (*MobileSuiteProtobuf) ProtoMessage()    {}

func (m *MobileSuiteProtobuf) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MobileSuiteProtobuf) GetArena() int32 {
	if m != nil && m.Arena != nil {
		return *m.Arena
	}
	return 0
}

func (m *MobileSuiteProtobuf) GetCommand() int32 {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return 0
}

func (m *MobileSuiteProtobuf) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type TestMessage struct {
	TestInt          *int32  `protobuf:"varint,1,req,name=testInt" json:"testInt,omitempty"`
	TestString       *string `protobuf:"bytes,2,req,name=testString" json:"testString,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestMessage) Reset()         { *m = TestMessage{} }
func (m *TestMessage) String() string { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()    {}

func (m *TestMessage) GetTestInt() int32 {
	if m != nil && m.TestInt != nil {
		return *m.TestInt
	}
	return 0
}

func (m *TestMessage) GetTestString() string {
	if m != nil && m.TestString != nil {
		return *m.TestString
	}
	return ""
}

func init() {
}
